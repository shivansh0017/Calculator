// ********RoostGPT********
/*
Test generated by RoostGPT for test Java-repo-test using AI Type Open AI and AI Model gpt-4

ROOST_METHOD_HASH=getThemesAsMap_0d257af0b9
ROOST_METHOD_SIG_HASH=getThemesAsMap_4c59a768b5

"""
Scenario 1: Check if the method returns an empty map when the themes list is null
Details:  
    TestName: testReturnEmptyMapWhenThemesIsNull
    Description: This test checks whether the method correctly returns an empty map when the themes list is null. 
  Execution:
    Arrange: Set themes list to null.
    Act: Invoke getThemesAsMap method.
    Assert: Use JUnit assertions to check that the returned map is empty.
  Validation: 
    The assertion verifies that the method correctly handles null input and returns an empty map. This test checks the method's robustness against null input.

Scenario 2: Check if the method returns an empty map when the themes list is empty
Details:  
    TestName: testReturnEmptyMapWhenThemesIsEmpty
    Description: This test checks whether the method correctly returns an empty map when themes list is empty.
  Execution:
    Arrange: Initialize an empty themes list.
    Act: Invoke getThemesAsMap method.
    Assert: Use JUnit assertions to check that the returned map is empty.
  Validation: 
    The assertion verifies that the method correctly handles an empty list and returns an empty map. This test checks the method's robustness against empty input.

Scenario 3: Check if the method returns a map with correct size when the themes list is not empty
Details:  
    TestName: testReturnMapWithCorrectSize
    Description: This test checks whether the method correctly returns a map with the same size as the themes list when the list is not empty.
  Execution:
    Arrange: Initialize a themes list with n elements.
    Act: Invoke getThemesAsMap method.
    Assert: Use JUnit assertions to check that the returned map has size n.
  Validation: 
    The assertion verifies that the method correctly maps each Theme object in the list to a key-value pair in the map. This test checks the method's functionality with normal input.

Scenario 4: Check if the method returns a map with correct key-value pairs
Details:  
    TestName: testReturnMapWithCorrectKeyValuePairs
    Description: This test checks whether the method correctly maps each Theme object in the list to a key-value pair in the map.
  Execution:
    Arrange: Initialize a themes list with Theme objects.
    Act: Invoke getThemesAsMap method.
    Assert: Use JUnit assertions to check that each key-value pair in the returned map corresponds to a Theme object in the list.
  Validation: 
    The assertion verifies that the method correctly maps each Theme object to a key-value pair in the map using the Theme's name as the key and the Theme object itself as the value. This test checks the method's functionality with normal input.
"""
*/

// ********RoostGPT********
package com.houarizegai.calculator.theme.properties;

import java.util.ArrayList;
import java.util.Collections;
import java.util.List;
import java.util.Map;
import java.util.stream.Collectors;
import java.util.function.Function;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

public class ThemeListGetThemesAsMapTest {
    private List<Theme> themes;
    
    @Test
    public void testReturnEmptyMapWhenThemesIsNull() {
        themes = null;
        assertTrue(getThemesAsMap().isEmpty());
    }
    
    @Test
    public void testReturnEmptyMapWhenThemesIsEmpty() {
        themes = new ArrayList<>();
        assertTrue(getThemesAsMap().isEmpty());
    }
    
    @Test
    public void testReturnMapWithCorrectSize() {
        themes = new ArrayList<>();
        themes.add(new Theme());
        themes.add(new Theme());
        assertEquals(2, getThemesAsMap().size());
    }
    
    @Test
    public void testReturnMapWithCorrectKeyValuePairs() {
        themes = new ArrayList<>();
        Theme theme1 = new Theme();
        theme1.setName("theme1");
        themes.add(theme1);
        Theme theme2 = new Theme();
        theme2.setName("theme2");
        themes.add(theme2);
        Map<String, Theme> themeMap = getThemesAsMap();
        assertEquals(theme1, themeMap.get("theme1"));
        assertEquals(theme2, themeMap.get("theme2"));
    }
    
    public Map<String, Theme> getThemesAsMap() {
        if (themes == null) {
            return Collections.emptyMap();
        }
        return themes.stream().collect(Collectors.toMap(Theme::getName, Function.identity()));
    }
}
