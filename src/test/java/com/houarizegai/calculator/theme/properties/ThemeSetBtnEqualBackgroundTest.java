// ********RoostGPT********
/*
Test generated by RoostGPT for test Java-repo-test using AI Type Open AI and AI Model gpt-4

ROOST_METHOD_HASH=setBtnEqualBackground_e906aa180e
ROOST_METHOD_SIG_HASH=setBtnEqualBackground_85fbd39ea7

"""
Scenario 1: Test to check if the equal button background color is set correctly

Details:  
  TestName: testSetBtnEqualBackgroundCorrectValue
  Description: This test is designed to check if the equal button background color is set correctly when provided with a valid color code.
Execution:
  Arrange: Initialize a valid color code.
  Act: Invoke setBtnEqualBackground() with the initialized color code.
  Assert: Verify that btnEqualBackground field is equal to the initialized color code.
Validation: 
  This assertion checks that the method correctly sets the btnEqualBackground field. The expected result is that the btnEqualBackground field is equal to the color code provided. This is important as it ensures that the color of the equal button can be set correctly.

Scenario 2: Test to check if the equal button background color is set correctly when provided with an empty string

Details:  
  TestName: testSetBtnEqualBackgroundEmptyString
  Description: This test is meant to check if the equal button background color is set correctly when provided with an empty string.
Execution:
  Arrange: Initialize an empty string.
  Act: Invoke setBtnEqualBackground() with the empty string.
  Assert: Verify that btnEqualBackground field is equal to the empty string.
Validation: 
  This assertion checks that the method correctly sets the btnEqualBackground field when provided with an empty string. The expected result is that the btnEqualBackground field is equal to the empty string. This is important as it ensures that the equal button's color is set correctly even when an empty string is provided as input.

Scenario 3: Test to check if the equal button background color is set correctly when provided with a null value

Details:  
  TestName: testSetBtnEqualBackgroundNullValue
  Description: This test is designed to check if the equal button background color is set correctly when provided with a null value.
Execution:
  Arrange: Initialize a null value.
  Act: Invoke setBtnEqualBackground() with the null value.
  Assert: Verify that btnEqualBackground field is equal to null.
Validation: 
  This assertion checks that the method correctly sets the btnEqualBackground field when provided with a null value. The expected result is that the btnEqualBackground field is equal to null. This is important as it ensures that the equal button's color is set correctly even when a null value is provided as input.
"""
*/

// ********RoostGPT********
package com.houarizegai.calculator.theme.properties;

import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.assertEquals;

public class ThemeSetBtnEqualBackgroundTest {
    private Theme theme;

    @BeforeEach
    public void setup() {
        this.theme = new Theme();
    }

    @Test
    public void testSetBtnEqualBackgroundCorrectValue() {
        // Arrange
        String colorCode = "#FFFFFF";
        // Act
        theme.setBtnEqualBackground(colorCode);
        // Assert
        assertEquals(colorCode, theme.getBtnEqualBackground());
    }

    @Test
    public void testSetBtnEqualBackgroundEmptyString() {
        // Arrange
        String emptyString = "";
        // Act
        theme.setBtnEqualBackground(emptyString);
        // Assert
        assertEquals(emptyString, theme.getBtnEqualBackground());
    }

    @Test
    public void testSetBtnEqualBackgroundNullValue() {
        // Arrange
        String nullValue = null;
        // Act
        theme.setBtnEqualBackground(nullValue);
        // Assert
        assertEquals(nullValue, theme.getBtnEqualBackground());
    }
}
